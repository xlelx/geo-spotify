{"version":3,"sources":["util/theme.js","components/Map.js","redux/types.js","keys/keys.js","redux/actions.js","components/Login.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js","images/login.png"],"names":["theme","palette","primary","main","light","secondary","lightest","type","validCountries","split","useStyles","makeStyles","Map","dispatch","useDispatch","useSelector","state","root","token","dataLoaded","countryData","playlists","playlist","to","chartEvents","eventName","callback","selected","chartWrapper","getChart","getSelection","row","console","log","payload","newTable","role","p","html","newPlaylists","forEach","country","a","code","iso3311a2","getCode","axios","get","params","limit","headers","Authorization","res","pl","data","items","push","uri","image","images","url","className","style","padding","Grid","container","spacing","item","xs","chartType","mapsApiKey","rootProps","options","backgroundColor","fill","stroke","strokeWidth","geochartVersion","regioncoderVersion","datalessRegionColor","defaultColor","enableRegionInteractivity","tooltip","isHtml","trigger","height","window","innerHeight","uris","play","name","showSaveIcon","CLIENT_ID","backgroundImage","LoginImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","display","flexDirection","alignItems","avatar","form","width","marginTop","submit","title","color","Copyright","Typography","variant","align","Date","getFullYear","CustomButton","classes","useState","clicked","setClicked","requestBody","client_id","response_type","redirect_uri","location","host","scope","useEffect","assign","qs","stringify","Button","fullWidth","onClick","Login","search","parse","href","grant_type","config","btoa","post","then","catch","err","response","authenticated","component","CssBaseline","sm","md","Paper","elevation","square","Box","mt","createMuiTheme","themeObject","App","ThemeProvider","path","Boolean","hostname","match","initialState","refreshToken","middleware","thunk","reducers","action","access_token","store","createStore","combineReducers","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.5ce21f4d.chunk.js","sourcesContent":["const theme = {\r\n    palette:{\r\n        primary: {\r\n            main: '#1db954',\r\n            light: '#1ed760'\r\n        },\r\n        secondary: {\r\n            main: '#212121',\r\n            light: '#535353',\r\n            lightest: '#b3b3b3'\r\n        },\r\n        type: 'dark'\r\n    }\r\n}\r\n\r\nexport default theme;","import React, { Component, Fragment, useState, useEffect } from 'react'\r\nimport { Chart } from 'react-google-charts'\r\nimport axios from 'axios'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport iso3311a2 from 'iso-3166-1-alpha-2'\r\nimport SpotifyPlayer from 'react-spotify-web-playback'\r\nimport { SET_COUNTRYDATA_PLAYLISTS, SET_PLAYLIST } from '../redux/types'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport theme from '../util/theme'\r\n\r\nconst validCountries = 'Algeria,Egypt,Morocco,South Africa,Tunisia,Australia,New Zealand,Argentina,Bolivia,Brazil,Chile,Colombia,Ecuador,Paraguay,Peru,Uruguay,Canada,Costa Rica,Dominican Republic,El Salvador,Guatemala,Honduras,Mexico,Nicaragua,Panama,United States,Andorra,Austria,Belgium,Bulgaria,Cyprus,Czech Republic,Denmark,Estonia,Finland,France,Germany,Greece,Hungary,Iceland,Ireland,Italy,Latvia,Liechtenstein,Lithuania,Luxembourg,Malta,Monaco,Netherlands,Norway,Poland,Portugal,Romania,Slovakia,Spain,Sweden,Switzerland,Turkey,United Kingdom,Russia,Belarus,Kazakhstan,Moldova,Ukraine,Albania,Bosnia,Croatia,Montenegro,North Macedonia,Serbia,Slovenia,Kosovo,Bahrain,Hong Kong,India,Indonesia,Israel,Japan,Jordan,Kuwait,Lebanon,Malaysia,Oman,Palestine,Philippines,Qatar,Saudi Arabia,Singapore,Taiwan,Thailand,United Arab Emirates,Vietnam'.split(\r\n  ','\r\n)\r\nconst useStyles = makeStyles(theme => ({}))\r\nfunction Map () {\r\n  const classes = useStyles()\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { token, dataLoaded, countryData, playlists, playlist } = useSelector(\r\n    state => state.root\r\n  )\r\n\r\n  if (!token) {\r\n    return <Redirect to='/'></Redirect>\r\n  }\r\n\r\n  const chartEvents = [\r\n    {\r\n      eventName: 'select',\r\n      callback ({ chartWrapper }) {\r\n        let selected = chartWrapper.getChart().getSelection()[0] //index off by one\r\n        if (selected) {\r\n          let row = selected.row + 1\r\n          console.log(playlists[row])\r\n          dispatch({ type: SET_PLAYLIST, payload: playlists[row] })\r\n        }\r\n      }\r\n    }\r\n  ]\r\n\r\n  //Load map and playlist data\r\n  if (!dataLoaded) {\r\n    const newTable = [\r\n      ['Country', { type: 'string', role: 'tooltip', p: { html: true }}]\r\n    ]\r\n    const newPlaylists = []\r\n    validCountries.forEach(async country => {\r\n      const code = iso3311a2.getCode(country)\r\n      try {\r\n        const res = await axios.get(\r\n          'https://api.spotify.com/v1/browse/featured-playlists',\r\n          {\r\n            params: {\r\n              country: code,\r\n              limit: 1\r\n            },\r\n            headers: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          }\r\n        )\r\n        const pl = res.data.playlists.items[0]\r\n\r\n        newPlaylists.push(pl.uri)\r\n        const image = `<img src=\"${pl.images[0].url}\" style=\"width:200px\"/>`\r\n        newTable.push([country, image])\r\n      } catch (error) {\r\n        console.log('country not found')\r\n      }\r\n    })\r\n    dispatch({\r\n      type: SET_COUNTRYDATA_PLAYLISTS,\r\n      payload: { countryData: newTable, playlists: newPlaylists }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='App'\r\n      style={{\r\n        padding: '10px'\r\n      }}>\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={12}>\r\n            {dataLoaded ? (\r\n              <Chart\r\n                chartType='GeoChart'\r\n                data={countryData}\r\n                // Note: you will need to get a mapsApiKey for your project.\r\n                // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\r\n                mapsApiKey='AIzaSyCeSGOa_yX4pG3sRnQPrEGa4BY3mx5T4T0'\r\n                rootProps={{ 'data-testid': '1' }}\r\n                options={{\r\n                  backgroundColor: {\r\n                    fill: theme.palette.secondary.main,\r\n                    stroke: theme.palette.primary.main,\r\n                    strokeWidth: 3\r\n                  },\r\n                  geochartVersion: 11,\r\n                  regioncoderVersion: 1,\r\n                  datalessRegionColor: theme.palette.secondary.lightest,\r\n                  defaultColor: theme.palette.primary.main,\r\n                  enableRegionInteractivity: true,\r\n                  tooltip: {\r\n                    isHtml: true,\r\n                    trigger: 'focus'\r\n                  },\r\n                  height: `${window.innerHeight * 0.90}px`,\r\n                }}\r\n                chartEvents={chartEvents}\r\n              />\r\n            ) : null}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <SpotifyPlayer\r\n              token={token}\r\n              uris={[playlist]}\r\n              play={playlist ? true : false}\r\n              name='geo-spotify'\r\n              showSaveIcon\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","export const FETCH_AUTHORIZATION = 'FETCH_AUTHORIZATION'\r\nexport const SET_AUTHORIZATION = 'SET_AUTHORIZATION'\r\nexport const SET_COUNTRYDATA_PLAYLISTS = 'SET_COUNTRYDATA_PLAYLISTS'\r\nexport const SET_PLAYLISTS = 'SET_PLAYLISTS'\r\nexport const SET_PLAYLIST = 'SET_PLAYLIST'","export const CLIENT_ID = '6eb09ded486b45a6b0f011d4f4eb647f'\r\nexport const CLIENT_SECRET = '369dcf6887044b5daa55adedc9576a92'","import { CLIENT_ID, CLIENT_SECRET } from '../keys/keys'\r\nimport { SET_AUTHORIZATION } from './types'\r\nimport axios from 'axios'\r\nimport qs from 'querystring'\r\nimport iso3311a2 from 'iso-3166-1-alpha-2'\r\n\r\n\r\nexport const login = code => dispatch => {\r\n  const requestBody = {\r\n    grant_type: 'authorization_code',\r\n    code,\r\n    redirect_uri: 'http://localhost:3000',\r\n  }\r\n\r\n  const config = {\r\n    headers: {\r\n      Authorization: `Basic ${window.btoa(CLIENT_ID + ':' + CLIENT_SECRET)}`,\r\n      'content-type': 'application/x-www-form-urlencoded'\r\n    }\r\n  }\r\n  axios\r\n    .post(\r\n      'https://accounts.spotify.com/api/token',\r\n      qs.stringify(requestBody),\r\n      config\r\n    )\r\n    .then(res => {\r\n      dispatch({\r\n        type: SET_AUTHORIZATION,\r\n        payload: res.data\r\n      })\r\n    })\r\n    .catch(err => console.log(err.response.data))\r\n}\r\n\r\n\r\nconst validCountries = 'Algeria,Egypt,Morocco,South Africa,Tunisia,Australia,New Zealand,Argentina,Bolivia,Brazil,Chile,Colombia,Ecuador,Paraguay,Peru,Uruguay,Canada,Costa Rica,Dominican Republic,El Salvador,Guatemala,Honduras,Mexico,Nicaragua,Panama,United States,Andorra,Austria,Belgium,Bulgaria,Cyprus,Czech Republic,Denmark,Estonia,Finland,France,Germany,Greece,Hungary,Iceland,Ireland,Italy,Latvia,Liechtenstein,Lithuania,Luxembourg,Malta,Monaco,Netherlands,Norway,Poland,Portugal,Romania,Slovakia,Spain,Sweden,Switzerland,Turkey,United Kingdom,Russia,Belarus,Kazakhstan,Moldova,Ukraine,Albania,Bosnia,Croatia,Montenegro,North Macedonia,Serbia,Slovenia,Kosovo,Bahrain,Hong Kong,India,Indonesia,Israel,Japan,Jordan,Kuwait,Lebanon,Malaysia,Oman,Palestine,Philippines,Qatar,Saudi Arabia,Singapore,Taiwan,Thailand,United Arab Emirates,Vietnam'.split(\r\n  ','\r\n)\r\n\r\n\r\n\r\n// const config = {\r\n//   headers: {\r\n//     Authorization: `Basic ${window.btoa(CLIENT_ID + ':' + CLIENT_SECRET)}`\r\n//   }\r\n// }\r\n// let token\r\n// try {\r\n//   let res = await axios.get(\r\n//     'https://accounts.spotify.com/authorize',\r\n//     qs.stringify(requestBody)\r\n//   )\r\n//   token = await res.data.access_token\r\n//   axios.defaults.headers['Authorization'] = `Bearer ${token}`\r\n//   this.setState({ token })\r\n\r\n//   requestBody = {\r\n//     country: null,\r\n//     limit: '1'\r\n//   }\r\n\r\n//   const newTable = [\r\n//     ['Country', { type: 'string', role: 'tooltip', p: { html: true } }]\r\n//   ]\r\n//   validCountries.forEach(async country => {\r\n//     const code = iso3311a2.getCode(country)\r\n//     requestBody.country = code\r\n//     try {\r\n//       res = await axios.get(\r\n//         'https://api.spotify.com/v1/browse/featured-playlists',\r\n//         {\r\n//           params: {\r\n//             country: code,\r\n//             limit: 1\r\n//           }\r\n//         }\r\n//       )\r\n//       const pl = res.data.playlists.items[0]\r\n//       console.log(pl)\r\n//       playlists.push({ country, ...res.data.playlists.items[0] })\r\n//       const image = `<img src=\"${pl.images[0].url}\" style=\"width:100px\"/>`\r\n//       newTable.push([country, image])\r\n//     } catch (error) {\r\n//       console.log('country not found')\r\n//     }\r\n//   })\r\n//   this.setState({\r\n//     countryData: newTable,\r\n//     dataLoaded: true\r\n//   })\r\n// } catch (err) {\r\n//   console.log(err)\r\n// }\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { login } from '../redux/actions'\r\nimport { Redirect } from 'react-router-dom'\r\nimport qs from 'querystring'\r\nimport { CLIENT_ID } from '../keys/keys'\r\n\r\nimport LoginImage from '../images/login.png'\r\n\r\n\r\n//MUI\r\nimport theme from '../util/theme'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '100vh',\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${LoginImage})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundColor:\r\n      theme.palette.secondary.main,\r\n    backgroundSize: '50$ 50%',\r\n    backgroundPosition: 'center',\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(15, 0, 15),\r\n    height: 75\r\n  },\r\n  title:{\r\n    color: theme.palette.primary.main\r\n  }\r\n}));\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © Khant Thurein Han (Leo) '}\r\n      \r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\n\r\nconst CustomButton = () => {\r\n  const classes = useStyles();\r\n  const [clicked, setClicked] = useState(false)\r\n  const requestBody = {\r\n    client_id: CLIENT_ID,\r\n    response_type: 'code',\r\n    redirect_uri: 'http://'+window.location.host, //TODO,\r\n    scope: 'streaming user-read-email user-read-private user-library-read user-library-modify user-read-playback-state user-modify-playback-state'\r\n\r\n  }\r\n  useEffect(() => {\r\n    if (clicked) {\r\n      // do something meaningful, Promises, if/else, whatever, and then\r\n      window.location.assign(\r\n        'https://accounts.spotify.com/authorize?' + qs.stringify(requestBody)\r\n      )\r\n    }\r\n  })\r\n\r\n  return (\r\n          <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                onClick={() => setClicked(true)}\r\n              >\r\n                Login to Spotify\r\n              </Button>)\r\n}\r\n\r\n\r\nfunction Login () {\r\n  \r\n  const classes = useStyles();\r\n  const dispatch = useDispatch()\r\n\r\n  if (window.location.search) {\r\n    const res = qs.parse(window.location.href.split('?')[1])\r\n    dispatch(login(res.code))\r\n  }\r\n\r\n  const authenticated = useSelector(state => state.root.authenticated)\r\n  return (\r\n    <div>{authenticated ? <Redirect to='/map'></Redirect> \r\n    : (\r\n      <Grid container component=\"main\" className={classes.root}>\r\n        <CssBaseline />\r\n        <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <div className={classes.paper}>\r\n            <Typography component=\"h1\" variant=\"h2\" className={classes.title}>\r\n              Geo-Spotify\r\n            </Typography>\r\n            <Box mt={12}>\r\n            <Typography variant=\"h4\">\r\n              Explore what's featured on Spotify around the globe!\r\n            </Typography>\r\n            </Box>\r\n              <CustomButton/>\r\n              <Box mt={5}>\r\n                <Copyright />\r\n              </Box>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    )}</div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Login;\r\n","import React, { Fragment, useEffect } from 'react'\r\nimport './App.css'\r\nimport Map from './components/Map'\r\nimport Login from './components/Login'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport themeObject from './util/theme'\r\n\r\nconst theme = createMuiTheme({\r\n  ...themeObject\r\n})\r\n\r\nfunction App () {\r\n  return (\r\n    <Fragment>\r\n      <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/map'>\r\n            <Map />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Login/>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n      </ThemeProvider>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    SET_AUTHORIZATION, SET_COUNTRYDATA_PLAYLISTS, SET_PLAYLIST\r\n}from './types'\r\nconst initialState = {\r\n    token: '',\r\n    dataLoaded: false,\r\n    refreshToken: '',\r\n    countryData: [],\r\n    authenticated: false,\r\n    playlists: [],\r\n    playlist: ''\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case SET_AUTHORIZATION:\r\n            return {\r\n                ...state,\r\n                token: action.payload.access_token,\r\n                authenticated: true\r\n            }\r\n        case SET_COUNTRYDATA_PLAYLISTS:\r\n            return {\r\n                ...state,\r\n                dataLoaded: true,\r\n                countryData: action.payload.countryData,\r\n                playlists: action.payload.playlists\r\n            }\r\n        case SET_PLAYLIST:\r\n            return {\r\n                ...state,\r\n                playlist: action.payload\r\n            }\r\n        default:\r\n            return { ... state}\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {\r\n    token: '',\r\n    dataLoaded: false,\r\n    refreshToken: '',\r\n    authenticated: false,\r\n    playlists: []\r\n}\r\n\r\nconst middleware = [thunk];\r\nconst reducers = {\r\n    root: rootReducer\r\n}\r\nconst store = createStore(\r\n    combineReducers(reducers),\r\n    initialState,\r\n    compose(applyMiddleware(...middleware)\r\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n    \r\n)\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/login.9fd6c7ab.png\";"],"sourceRoot":""}